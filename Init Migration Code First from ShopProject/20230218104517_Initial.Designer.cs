// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using ShopProject.Data;

namespace ShopProject.Migrations
{
    [DbContext(typeof(ShopContext))]
    [Migration("20230218104517_Initial")]
    partial class Initial
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasCharSet("utf8mb4")
                .UseCollation("utf8mb4_0900_ai_ci")
                .HasAnnotation("Relational:MaxIdentifierLength", 64)
                .HasAnnotation("ProductVersion", "5.0.10");

            modelBuilder.Entity("ShopProject.Models.Admin", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<string>("Login")
                        .HasColumnType("longtext");

                    b.Property<string>("Password")
                        .HasColumnType("longtext");

                    b.HasKey("Id");

                    b.ToTable("Admins");
                });

            modelBuilder.Entity("ShopProject.Models.Basket", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int(11) ");

                    b.Property<int>("AmountOfGood")
                        .HasColumnType("int(11)");

                    b.Property<bool>("IsInOrder")
                        .HasColumnType("tinyint(1)");

                    b.Property<decimal>("TotalSum")
                        .HasPrecision(20, 6)
                        .HasColumnType("decimal(20,6)");

                    b.Property<int>("UserId")
                        .HasColumnType("int(11)");

                    b.HasKey("Id");

                    b.HasIndex("UserId")
                        .IsUnique();

                    b.ToTable("baskets");
                });

            modelBuilder.Entity("ShopProject.Models.Category", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int(11)");

                    b.Property<string>("Name")
                        .HasMaxLength(50)
                        .HasColumnType("char(50)")
                        .IsFixedLength(true);

                    b.Property<int>("ParentCategoryId")
                        .HasColumnType("int(11)");

                    b.HasKey("Id");

                    b.HasIndex(new[] { "ParentCategoryId" }, "FK_categories_to_parent_categories");

                    b.ToTable("categories");
                });

            modelBuilder.Entity("ShopProject.Models.Good", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int(11)");

                    b.Property<int>("CategoryId")
                        .HasColumnType("int(11)");

                    b.Property<string>("Description")
                        .HasColumnType("longtext");

                    b.Property<bool>("IsArchieved")
                        .HasColumnType("tinyint(1)");

                    b.Property<byte[]>("MainImage")
                        .HasColumnType("longblob");

                    b.Property<int>("ManufacturerId")
                        .HasColumnType("int(11)");

                    b.Property<string>("Name")
                        .HasMaxLength(50)
                        .HasColumnType("char(50)")
                        .IsFixedLength(true);

                    b.Property<decimal>("Price")
                        .HasPrecision(20, 6)
                        .HasColumnType("decimal(20,6)");

                    b.Property<int>("Year")
                        .HasColumnType("int(11)");

                    b.HasKey("Id");

                    b.HasIndex(new[] { "CategoryId" }, "FK_goods_categories");

                    b.HasIndex(new[] { "ManufacturerId" }, "FK_goods_manufacturers");

                    b.ToTable("goods");
                });

            modelBuilder.Entity("ShopProject.Models.GoodAtStock", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int(11)");

                    b.Property<int>("AmountLeft")
                        .HasColumnType("int(11)");

                    b.Property<int>("GoodId")
                        .HasColumnType("int(11) ");

                    b.HasKey("Id");

                    b.HasIndex("GoodId")
                        .IsUnique();

                    b.HasIndex(new[] { "GoodId" }, "FK_goodatstocks_goods");

                    b.ToTable("goodatstocks");
                });

            modelBuilder.Entity("ShopProject.Models.GoodInBasket", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int(11)");

                    b.Property<int>("Amount")
                        .HasColumnType("int(11)");

                    b.Property<int>("BasketId")
                        .HasColumnType("int(11) ");

                    b.Property<int>("GoodId")
                        .HasColumnType("int(11) ");

                    b.Property<decimal>("SumOfGoods")
                        .HasPrecision(20, 6)
                        .HasColumnType("decimal(20,6)");

                    b.HasKey("Id");

                    b.HasIndex(new[] { "BasketId" }, "FK_goodinbaskets_baskets");

                    b.HasIndex(new[] { "GoodId" }, "FK_goodinbaskets_goods");

                    b.ToTable("goodinbaskets");
                });

            modelBuilder.Entity("ShopProject.Models.History", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int(11)");

                    b.Property<int>("AmountOfViwedGoods")
                        .HasColumnType("int(11)");

                    b.Property<int>("UserId")
                        .HasColumnType("int(11)");

                    b.Property<int>("Year")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex(new[] { "UserId" }, "FK_histories_users");

                    b.ToTable("histories");
                });

            modelBuilder.Entity("ShopProject.Models.HistoryElement", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int(11)");

                    b.Property<int>("HistoryId")
                        .HasColumnType("int(11)");

                    b.Property<int>("ViwedGoodId")
                        .HasColumnType("int(11) ");

                    b.HasKey("Id");

                    b.HasIndex(new[] { "ViwedGoodId" }, "FK_historyelements_goods");

                    b.HasIndex(new[] { "HistoryId" }, "FK_historyelements_histories");

                    b.ToTable("historyelements");
                });

            modelBuilder.Entity("ShopProject.Models.LikedGood", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int(11)");

                    b.Property<int>("GoodId")
                        .HasColumnType("int(11)");

                    b.Property<int>("UserId")
                        .HasColumnType("int(11)");

                    b.HasKey("Id");

                    b.HasIndex(new[] { "GoodId" }, "FK_likedgoods_goods");

                    b.HasIndex(new[] { "UserId" }, "FK_likedgoods_users");

                    b.ToTable("likedgoods");
                });

            modelBuilder.Entity("ShopProject.Models.Manufacturer", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int(11)");

                    b.Property<string>("Country")
                        .HasMaxLength(50)
                        .HasColumnType("char(50)")
                        .IsFixedLength(true);

                    b.Property<string>("Name")
                        .HasMaxLength(50)
                        .HasColumnType("char(50)")
                        .IsFixedLength(true);

                    b.HasKey("Id");

                    b.ToTable("manufacturers");
                });

            modelBuilder.Entity("ShopProject.Models.Order", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int(11)");

                    b.Property<int>("Adress")
                        .HasColumnType("int(11)");

                    b.Property<int>("BasketId")
                        .HasColumnType("int(11) ");

                    b.Property<decimal>("Cost")
                        .HasPrecision(20, 6)
                        .HasColumnType("decimal(20,6)");

                    b.Property<string>("Status")
                        .IsRequired()
                        .HasColumnType("enum('Delivered','InProcess')");

                    b.Property<int>("UserId")
                        .HasColumnType("int(11)");

                    b.HasKey("Id");

                    b.HasIndex(new[] { "BasketId" }, "FK_orders_baskets");

                    b.HasIndex(new[] { "UserId" }, "FK_orders_users");

                    b.ToTable("orders");
                });

            modelBuilder.Entity("ShopProject.Models.Photo", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<int>("GoodId")
                        .HasColumnType("int(11)");

                    b.Property<byte[]>("Image")
                        .HasColumnType("longblob");

                    b.HasKey("Id");

                    b.HasIndex("GoodId");

                    b.ToTable("Photo");
                });

            modelBuilder.Entity("ShopProject.Models.User", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int(11)");

                    b.Property<string>("City")
                        .HasMaxLength(50)
                        .HasColumnType("char(50)")
                        .IsFixedLength(true);

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("char(50)")
                        .IsFixedLength(true);

                    b.Property<string>("LastName")
                        .HasMaxLength(50)
                        .HasColumnType("char(50)")
                        .IsFixedLength(true);

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("char(50)")
                        .IsFixedLength(true);

                    b.Property<string>("Password")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("char(50)")
                        .IsFixedLength(true);

                    b.HasKey("Id");

                    b.ToTable("users");
                });

            modelBuilder.Entity("ShopProject.Models.Basket", b =>
                {
                    b.HasOne("ShopProject.Models.User", "User")
                        .WithOne("Basket")
                        .HasForeignKey("ShopProject.Models.Basket", "UserId")
                        .HasConstraintName("FK_baskets_users")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("ShopProject.Models.Category", b =>
                {
                    b.HasOne("ShopProject.Models.Category", "ParentCategory")
                        .WithMany("InverseParentCategory")
                        .HasForeignKey("ParentCategoryId")
                        .HasConstraintName("FK_categories_to_parent_categories")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("ParentCategory");
                });

            modelBuilder.Entity("ShopProject.Models.Good", b =>
                {
                    b.HasOne("ShopProject.Models.Category", "Category")
                        .WithMany("Goods")
                        .HasForeignKey("CategoryId")
                        .HasConstraintName("FK_goods_categories")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ShopProject.Models.Manufacturer", "Manufacturer")
                        .WithMany("Goods")
                        .HasForeignKey("ManufacturerId")
                        .HasConstraintName("FK_goods_manufacturers")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Category");

                    b.Navigation("Manufacturer");
                });

            modelBuilder.Entity("ShopProject.Models.GoodAtStock", b =>
                {
                    b.HasOne("ShopProject.Models.Good", "Good")
                        .WithOne("GoodAtStock")
                        .HasForeignKey("ShopProject.Models.GoodAtStock", "GoodId")
                        .HasConstraintName("FK_goodatstocks_goods")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Good");
                });

            modelBuilder.Entity("ShopProject.Models.GoodInBasket", b =>
                {
                    b.HasOne("ShopProject.Models.Basket", "Basket")
                        .WithMany("GoodInBaskets")
                        .HasForeignKey("BasketId")
                        .HasConstraintName("FK_goodinbaskets_baskets")
                        .IsRequired();

                    b.HasOne("ShopProject.Models.Good", "Good")
                        .WithMany("GoodInBaskets")
                        .HasForeignKey("GoodId")
                        .HasConstraintName("FK_goodinbaskets_goods")
                        .IsRequired();

                    b.Navigation("Basket");

                    b.Navigation("Good");
                });

            modelBuilder.Entity("ShopProject.Models.History", b =>
                {
                    b.HasOne("ShopProject.Models.User", "User")
                        .WithMany("Histories")
                        .HasForeignKey("UserId")
                        .HasConstraintName("FK_histories_users")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("ShopProject.Models.HistoryElement", b =>
                {
                    b.HasOne("ShopProject.Models.History", "History")
                        .WithMany("HistoryElements")
                        .HasForeignKey("HistoryId")
                        .HasConstraintName("FK_historyelements_histories")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ShopProject.Models.Good", "ViwedGood")
                        .WithMany("HistoryElements")
                        .HasForeignKey("ViwedGoodId")
                        .HasConstraintName("FK_historyelements_goods")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("History");

                    b.Navigation("ViwedGood");
                });

            modelBuilder.Entity("ShopProject.Models.LikedGood", b =>
                {
                    b.HasOne("ShopProject.Models.Good", "Good")
                        .WithMany("LikedGoods")
                        .HasForeignKey("GoodId")
                        .HasConstraintName("FK_likedgoods_goods")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ShopProject.Models.User", "User")
                        .WithMany("LikedGoods")
                        .HasForeignKey("UserId")
                        .HasConstraintName("FK_likedgoods_users")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Good");

                    b.Navigation("User");
                });

            modelBuilder.Entity("ShopProject.Models.Order", b =>
                {
                    b.HasOne("ShopProject.Models.Basket", "Basket")
                        .WithMany("Orders")
                        .HasForeignKey("BasketId")
                        .HasConstraintName("FK_orders_baskets")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ShopProject.Models.User", "User")
                        .WithMany("Orders")
                        .HasForeignKey("UserId")
                        .HasConstraintName("FK_orders_users")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Basket");

                    b.Navigation("User");
                });

            modelBuilder.Entity("ShopProject.Models.Photo", b =>
                {
                    b.HasOne("ShopProject.Models.Good", "Good")
                        .WithMany("Photos")
                        .HasForeignKey("GoodId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Good");
                });

            modelBuilder.Entity("ShopProject.Models.Basket", b =>
                {
                    b.Navigation("GoodInBaskets");

                    b.Navigation("Orders");
                });

            modelBuilder.Entity("ShopProject.Models.Category", b =>
                {
                    b.Navigation("Goods");

                    b.Navigation("InverseParentCategory");
                });

            modelBuilder.Entity("ShopProject.Models.Good", b =>
                {
                    b.Navigation("GoodAtStock");

                    b.Navigation("GoodInBaskets");

                    b.Navigation("HistoryElements");

                    b.Navigation("LikedGoods");

                    b.Navigation("Photos");
                });

            modelBuilder.Entity("ShopProject.Models.History", b =>
                {
                    b.Navigation("HistoryElements");
                });

            modelBuilder.Entity("ShopProject.Models.Manufacturer", b =>
                {
                    b.Navigation("Goods");
                });

            modelBuilder.Entity("ShopProject.Models.User", b =>
                {
                    b.Navigation("Basket");

                    b.Navigation("Histories");

                    b.Navigation("LikedGoods");

                    b.Navigation("Orders");
                });
#pragma warning restore 612, 618
        }
    }
}
